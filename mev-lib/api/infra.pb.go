// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.4
// source: infra.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxEncoding int32

const (
	TxEncoding_TX_ENCODING_RLP  TxEncoding = 0
	TxEncoding_TX_ENCODING_JSON TxEncoding = 1
)

// Enum value maps for TxEncoding.
var (
	TxEncoding_name = map[int32]string{
		0: "TX_ENCODING_RLP",
		1: "TX_ENCODING_JSON",
	}
	TxEncoding_value = map[string]int32{
		"TX_ENCODING_RLP":  0,
		"TX_ENCODING_JSON": 1,
	}
)

func (x TxEncoding) Enum() *TxEncoding {
	p := new(TxEncoding)
	*p = x
	return p
}

func (x TxEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_proto_enumTypes[0].Descriptor()
}

func (TxEncoding) Type() protoreflect.EnumType {
	return &file_infra_proto_enumTypes[0]
}

func (x TxEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxEncoding.Descriptor instead.
func (TxEncoding) EnumDescriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{0}
}

type TxState int32

const (
	TxState_TX_STATE_PENDING             TxState = 0
	TxState_TX_STATE_QUEUED              TxState = 1
	TxState_TX_STATE_MINED               TxState = 2
	TxState_TX_STATE_DISCARDED           TxState = 3
	TxState_TX_STATE_CANCELLED_BY_CLIENT TxState = 4
)

// Enum value maps for TxState.
var (
	TxState_name = map[int32]string{
		0: "TX_STATE_PENDING",
		1: "TX_STATE_QUEUED",
		2: "TX_STATE_MINED",
		3: "TX_STATE_DISCARDED",
		4: "TX_STATE_CANCELLED_BY_CLIENT",
	}
	TxState_value = map[string]int32{
		"TX_STATE_PENDING":             0,
		"TX_STATE_QUEUED":              1,
		"TX_STATE_MINED":               2,
		"TX_STATE_DISCARDED":           3,
		"TX_STATE_CANCELLED_BY_CLIENT": 4,
	}
)

func (x TxState) Enum() *TxState {
	p := new(TxState)
	*p = x
	return p
}

func (x TxState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxState) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_proto_enumTypes[1].Descriptor()
}

func (TxState) Type() protoreflect.EnumType {
	return &file_infra_proto_enumTypes[1]
}

func (x TxState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxState.Descriptor instead.
func (TxState) EnumDescriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{1}
}

type SimulateTxType int32

const (
	SimulateTxType_SIMULATE_TXDATA      SimulateTxType = 0
	SimulateTxType_SIMULATE_TXHASH      SimulateTxType = 1
	SimulateTxType_SIMULATE_RAW_MESSAGE SimulateTxType = 2
)

// Enum value maps for SimulateTxType.
var (
	SimulateTxType_name = map[int32]string{
		0: "SIMULATE_TXDATA",
		1: "SIMULATE_TXHASH",
		2: "SIMULATE_RAW_MESSAGE",
	}
	SimulateTxType_value = map[string]int32{
		"SIMULATE_TXDATA":      0,
		"SIMULATE_TXHASH":      1,
		"SIMULATE_RAW_MESSAGE": 2,
	}
)

func (x SimulateTxType) Enum() *SimulateTxType {
	p := new(SimulateTxType)
	*p = x
	return p
}

func (x SimulateTxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimulateTxType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_proto_enumTypes[2].Descriptor()
}

func (SimulateTxType) Type() protoreflect.EnumType {
	return &file_infra_proto_enumTypes[2]
}

func (x SimulateTxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimulateTxType.Descriptor instead.
func (SimulateTxType) EnumDescriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{2}
}

type StateDiffType int32

const (
	StateDiffType_STATE_DIFF_TYPE_BALANCE StateDiffType = 0
	StateDiffType_STATE_DIFF_TYPE_STORAGE StateDiffType = 1
	StateDiffType_STATE_DIFF_TYPE_CODE    StateDiffType = 2
)

// Enum value maps for StateDiffType.
var (
	StateDiffType_name = map[int32]string{
		0: "STATE_DIFF_TYPE_BALANCE",
		1: "STATE_DIFF_TYPE_STORAGE",
		2: "STATE_DIFF_TYPE_CODE",
	}
	StateDiffType_value = map[string]int32{
		"STATE_DIFF_TYPE_BALANCE": 0,
		"STATE_DIFF_TYPE_STORAGE": 1,
		"STATE_DIFF_TYPE_CODE":    2,
	}
)

func (x StateDiffType) Enum() *StateDiffType {
	p := new(StateDiffType)
	*p = x
	return p
}

func (x StateDiffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StateDiffType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_proto_enumTypes[3].Descriptor()
}

func (StateDiffType) Type() protoreflect.EnumType {
	return &file_infra_proto_enumTypes[3]
}

func (x StateDiffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StateDiffType.Descriptor instead.
func (StateDiffType) EnumDescriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{3}
}

type SubscribeTxpoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []string `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	// If true, pending transactions will be included in the response.
	IncludePending bool `protobuf:"varint,2,opt,name=include_pending,json=includePending,proto3" json:"include_pending,omitempty"`
	// If true, future transactions will be included in the response.
	// Future transactions are txs with nonce > current nonce+1.
	IncludeQueued bool       `protobuf:"varint,3,opt,name=include_queued,json=includeQueued,proto3" json:"include_queued,omitempty"`
	Encoding      TxEncoding `protobuf:"varint,4,opt,name=encoding,proto3,enum=mev.TxEncoding" json:"encoding,omitempty"`
	// If true, cancel all the subscription for the specified pools.
	Cancel bool `protobuf:"varint,5,opt,name=cancel,proto3" json:"cancel,omitempty"`
	// If true, the initial state of the txpool will be returned.
	InitialState bool `protobuf:"varint,6,opt,name=initial_state,json=initialState,proto3" json:"initial_state,omitempty"`
}

func (x *SubscribeTxpoolRequest) Reset() {
	*x = SubscribeTxpoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTxpoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTxpoolRequest) ProtoMessage() {}

func (x *SubscribeTxpoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTxpoolRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTxpoolRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeTxpoolRequest) GetPools() []string {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *SubscribeTxpoolRequest) GetIncludePending() bool {
	if x != nil {
		return x.IncludePending
	}
	return false
}

func (x *SubscribeTxpoolRequest) GetIncludeQueued() bool {
	if x != nil {
		return x.IncludeQueued
	}
	return false
}

func (x *SubscribeTxpoolRequest) GetEncoding() TxEncoding {
	if x != nil {
		return x.Encoding
	}
	return TxEncoding_TX_ENCODING_RLP
}

func (x *SubscribeTxpoolRequest) GetCancel() bool {
	if x != nil {
		return x.Cancel
	}
	return false
}

func (x *SubscribeTxpoolRequest) GetInitialState() bool {
	if x != nil {
		return x.InitialState
	}
	return false
}

type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId        string   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	RemoteAddress string   `protobuf:"bytes,2,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	Geo           []string `protobuf:"bytes,3,rep,name=geo,proto3" json:"geo,omitempty"`
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{1}
}

func (x *PeerInfo) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *PeerInfo) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *PeerInfo) GetGeo() []string {
	if x != nil {
		return x.Geo
	}
	return nil
}

type TxpoolTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      []byte  `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	State     TxState `protobuf:"varint,2,opt,name=state,proto3,enum=mev.TxState" json:"state,omitempty"`
	Data      []byte  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	HeadBlock uint64  `protobuf:"varint,4,opt,name=head_block,json=headBlock,proto3" json:"head_block,omitempty"`
	// EVM-specific.  MEV-Share does not return these fields.
	Sender               []byte    `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderNonce          uint64    `protobuf:"varint,6,opt,name=sender_nonce,json=senderNonce,proto3" json:"sender_nonce,omitempty"`
	HeadBlockHash        []byte    `protobuf:"bytes,7,opt,name=head_block_hash,json=headBlockHash,proto3" json:"head_block_hash,omitempty"`
	BlockBaseFee         uint64    `protobuf:"varint,8,opt,name=block_base_fee,json=blockBaseFee,proto3" json:"block_base_fee,omitempty"`
	FirstPeer            *PeerInfo `protobuf:"bytes,9,opt,name=first_peer,json=firstPeer,proto3" json:"first_peer,omitempty"`
	FirstSeenTimestampUs uint64    `protobuf:"varint,10,opt,name=first_seen_timestamp_us,json=firstSeenTimestampUs,proto3" json:"first_seen_timestamp_us,omitempty"`
	IsDirectBroadcast    bool      `protobuf:"varint,11,opt,name=is_direct_broadcast,json=isDirectBroadcast,proto3" json:"is_direct_broadcast,omitempty"`
}

func (x *TxpoolTransaction) Reset() {
	*x = TxpoolTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxpoolTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxpoolTransaction) ProtoMessage() {}

func (x *TxpoolTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxpoolTransaction.ProtoReflect.Descriptor instead.
func (*TxpoolTransaction) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{2}
}

func (x *TxpoolTransaction) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TxpoolTransaction) GetState() TxState {
	if x != nil {
		return x.State
	}
	return TxState_TX_STATE_PENDING
}

func (x *TxpoolTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TxpoolTransaction) GetHeadBlock() uint64 {
	if x != nil {
		return x.HeadBlock
	}
	return 0
}

func (x *TxpoolTransaction) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *TxpoolTransaction) GetSenderNonce() uint64 {
	if x != nil {
		return x.SenderNonce
	}
	return 0
}

func (x *TxpoolTransaction) GetHeadBlockHash() []byte {
	if x != nil {
		return x.HeadBlockHash
	}
	return nil
}

func (x *TxpoolTransaction) GetBlockBaseFee() uint64 {
	if x != nil {
		return x.BlockBaseFee
	}
	return 0
}

func (x *TxpoolTransaction) GetFirstPeer() *PeerInfo {
	if x != nil {
		return x.FirstPeer
	}
	return nil
}

func (x *TxpoolTransaction) GetFirstSeenTimestampUs() uint64 {
	if x != nil {
		return x.FirstSeenTimestampUs
	}
	return 0
}

func (x *TxpoolTransaction) GetIsDirectBroadcast() bool {
	if x != nil {
		return x.IsDirectBroadcast
	}
	return false
}

type PoolSpecificAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBundle bool     `protobuf:"varint,1,opt,name=is_bundle,json=isBundle,proto3" json:"is_bundle,omitempty"`
	Logs     [][]byte `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *PoolSpecificAttributes) Reset() {
	*x = PoolSpecificAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolSpecificAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolSpecificAttributes) ProtoMessage() {}

func (x *PoolSpecificAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolSpecificAttributes.ProtoReflect.Descriptor instead.
func (*PoolSpecificAttributes) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{3}
}

func (x *PoolSpecificAttributes) GetIsBundle() bool {
	if x != nil {
		return x.IsBundle
	}
	return false
}

func (x *PoolSpecificAttributes) GetLogs() [][]byte {
	if x != nil {
		return x.Logs
	}
	return nil
}

type SubscribeTxpoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool                   string                  `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	Transaction            *TxpoolTransaction      `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	PoolSpecificAttributes *PoolSpecificAttributes `protobuf:"bytes,3,opt,name=pool_specific_attributes,json=poolSpecificAttributes,proto3" json:"pool_specific_attributes,omitempty"`
}

func (x *SubscribeTxpoolResponse) Reset() {
	*x = SubscribeTxpoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTxpoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTxpoolResponse) ProtoMessage() {}

func (x *SubscribeTxpoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTxpoolResponse.ProtoReflect.Descriptor instead.
func (*SubscribeTxpoolResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{4}
}

func (x *SubscribeTxpoolResponse) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *SubscribeTxpoolResponse) GetTransaction() *TxpoolTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SubscribeTxpoolResponse) GetPoolSpecificAttributes() *PoolSpecificAttributes {
	if x != nil {
		return x.PoolSpecificAttributes
	}
	return nil
}

type SimulateRawMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From     []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To       []byte `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Gas      uint64 `protobuf:"varint,3,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice []byte `protobuf:"bytes,4,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Value    []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Data     []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SimulateRawMessage) Reset() {
	*x = SimulateRawMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateRawMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateRawMessage) ProtoMessage() {}

func (x *SimulateRawMessage) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateRawMessage.ProtoReflect.Descriptor instead.
func (*SimulateRawMessage) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{5}
}

func (x *SimulateRawMessage) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SimulateRawMessage) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SimulateRawMessage) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *SimulateRawMessage) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *SimulateRawMessage) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SimulateRawMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SimulateTxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       SimulateTxType      `protobuf:"varint,1,opt,name=type,proto3,enum=mev.SimulateTxType" json:"type,omitempty"`
	Encoding   TxEncoding          `protobuf:"varint,2,opt,name=encoding,proto3,enum=mev.TxEncoding" json:"encoding,omitempty"`
	Data       []byte              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RawMessage *SimulateRawMessage `protobuf:"bytes,4,opt,name=raw_message,json=rawMessage,proto3" json:"raw_message,omitempty"`
}

func (x *SimulateTxData) Reset() {
	*x = SimulateTxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateTxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateTxData) ProtoMessage() {}

func (x *SimulateTxData) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateTxData.ProtoReflect.Descriptor instead.
func (*SimulateTxData) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{6}
}

func (x *SimulateTxData) GetType() SimulateTxType {
	if x != nil {
		return x.Type
	}
	return SimulateTxType_SIMULATE_TXDATA
}

func (x *SimulateTxData) GetEncoding() TxEncoding {
	if x != nil {
		return x.Encoding
	}
	return TxEncoding_TX_ENCODING_RLP
}

func (x *SimulateTxData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SimulateTxData) GetRawMessage() *SimulateRawMessage {
	if x != nil {
		return x.RawMessage
	}
	return nil
}

type OpCodeHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode uint32 `protobuf:"varint,1,opt,name=op_code,json=opCode,proto3" json:"op_code,omitempty"`
	// If set, operands will be matched against the given matcher before the hook is triggered.
	Matcher []byte `protobuf:"bytes,2,opt,name=matcher,proto3" json:"matcher,omitempty"`
}

func (x *OpCodeHook) Reset() {
	*x = OpCodeHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpCodeHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpCodeHook) ProtoMessage() {}

func (x *OpCodeHook) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpCodeHook.ProtoReflect.Descriptor instead.
func (*OpCodeHook) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{7}
}

func (x *OpCodeHook) GetOpCode() uint32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *OpCodeHook) GetMatcher() []byte {
	if x != nil {
		return x.Matcher
	}
	return nil
}

type OpCodeTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode   uint32   `protobuf:"varint,1,opt,name=op_code,json=opCode,proto3" json:"op_code,omitempty"`
	Operands [][]byte `protobuf:"bytes,2,rep,name=operands,proto3" json:"operands,omitempty"`
}

func (x *OpCodeTrace) Reset() {
	*x = OpCodeTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpCodeTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpCodeTrace) ProtoMessage() {}

func (x *OpCodeTrace) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpCodeTrace.ProtoReflect.Descriptor instead.
func (*OpCodeTrace) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{8}
}

func (x *OpCodeTrace) GetOpCode() uint32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *OpCodeTrace) GetOperands() [][]byte {
	if x != nil {
		return x.Operands
	}
	return nil
}

type StateOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Storage map[string][]byte `protobuf:"bytes,2,rep,name=storage,proto3" json:"storage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Code    []byte            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Balance []byte            `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
	Nonce   uint64            `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *StateOverride) Reset() {
	*x = StateOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateOverride) ProtoMessage() {}

func (x *StateOverride) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateOverride.ProtoReflect.Descriptor instead.
func (*StateOverride) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{9}
}

func (x *StateOverride) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *StateOverride) GetStorage() map[string][]byte {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *StateOverride) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *StateOverride) GetBalance() []byte {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *StateOverride) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type BlockOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Timestamp   int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BlockHash   []byte `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Coinbase    []byte `protobuf:"bytes,4,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	Difficulty  uint64 `protobuf:"varint,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	BaseFee     uint64 `protobuf:"varint,6,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
}

func (x *BlockOverrides) Reset() {
	*x = BlockOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockOverrides) ProtoMessage() {}

func (x *BlockOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockOverrides.ProtoReflect.Descriptor instead.
func (*BlockOverrides) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{10}
}

func (x *BlockOverrides) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockOverrides) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockOverrides) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *BlockOverrides) GetCoinbase() []byte {
	if x != nil {
		return x.Coinbase
	}
	return nil
}

func (x *BlockOverrides) GetDifficulty() uint64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *BlockOverrides) GetBaseFee() uint64 {
	if x != nil {
		return x.BaseFee
	}
	return 0
}

type SimulateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of signed transactions to execute in an atomic bundle.
	Bundle []*SimulateTxData `protobuf:"bytes,1,rep,name=bundle,proto3" json:"bundle,omitempty"`
	// Block number for which state to base this simulation on.  -1 means latest.
	StateBlockNumber int64 `protobuf:"varint,2,opt,name=state_block_number,json=stateBlockNumber,proto3" json:"state_block_number,omitempty"`
	// Block number for which this bundle is valid on.
	BlockOverrides *BlockOverrides `protobuf:"bytes,3,opt,name=block_overrides,json=blockOverrides,proto3" json:"block_overrides,omitempty"`
	// If set, state will be overridden before simulation.
	StateOverrides []*StateOverride `protobuf:"bytes,4,rep,name=state_overrides,json=stateOverrides,proto3" json:"state_overrides,omitempty"`
	// If set, the simulation will timeout after the given number of milliseconds.
	TimeoutMs int64 `protobuf:"varint,5,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
	// These are hooks that can be used to intercept certain behaviors during simulation.
	OpCodeHooks          []*OpCodeHook `protobuf:"bytes,10,rep,name=op_code_hooks,json=opCodeHooks,proto3" json:"op_code_hooks,omitempty"`
	IncludeLogs          bool          `protobuf:"varint,11,opt,name=include_logs,json=includeLogs,proto3" json:"include_logs,omitempty"`
	IncludeStateDiff     bool          `protobuf:"varint,12,opt,name=include_state_diff,json=includeStateDiff,proto3" json:"include_state_diff,omitempty"`
	PreserveState        bool          `protobuf:"varint,13,opt,name=preserve_state,json=preserveState,proto3" json:"preserve_state,omitempty"`
	UsePreservedStateKey []byte        `protobuf:"bytes,14,opt,name=use_preserved_state_key,json=usePreservedStateKey,proto3" json:"use_preserved_state_key,omitempty"`
	AbiType              string        `protobuf:"bytes,15,opt,name=abi_type,json=abiType,proto3" json:"abi_type,omitempty"`
	PreparedSimulateEnv  string        `protobuf:"bytes,16,opt,name=prepared_simulate_env,json=preparedSimulateEnv,proto3" json:"prepared_simulate_env,omitempty"` // If specified, a prepared env with preset state overrides will be used.
}

func (x *SimulateRequest) Reset() {
	*x = SimulateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateRequest) ProtoMessage() {}

func (x *SimulateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateRequest.ProtoReflect.Descriptor instead.
func (*SimulateRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{11}
}

func (x *SimulateRequest) GetBundle() []*SimulateTxData {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *SimulateRequest) GetStateBlockNumber() int64 {
	if x != nil {
		return x.StateBlockNumber
	}
	return 0
}

func (x *SimulateRequest) GetBlockOverrides() *BlockOverrides {
	if x != nil {
		return x.BlockOverrides
	}
	return nil
}

func (x *SimulateRequest) GetStateOverrides() []*StateOverride {
	if x != nil {
		return x.StateOverrides
	}
	return nil
}

func (x *SimulateRequest) GetTimeoutMs() int64 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

func (x *SimulateRequest) GetOpCodeHooks() []*OpCodeHook {
	if x != nil {
		return x.OpCodeHooks
	}
	return nil
}

func (x *SimulateRequest) GetIncludeLogs() bool {
	if x != nil {
		return x.IncludeLogs
	}
	return false
}

func (x *SimulateRequest) GetIncludeStateDiff() bool {
	if x != nil {
		return x.IncludeStateDiff
	}
	return false
}

func (x *SimulateRequest) GetPreserveState() bool {
	if x != nil {
		return x.PreserveState
	}
	return false
}

func (x *SimulateRequest) GetUsePreservedStateKey() []byte {
	if x != nil {
		return x.UsePreservedStateKey
	}
	return nil
}

func (x *SimulateRequest) GetAbiType() string {
	if x != nil {
		return x.AbiType
	}
	return ""
}

func (x *SimulateRequest) GetPreparedSimulateEnv() string {
	if x != nil {
		return x.PreparedSimulateEnv
	}
	return ""
}

type EvmTxStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (x *EvmTxStart) Reset() {
	*x = EvmTxStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvmTxStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmTxStart) ProtoMessage() {}

func (x *EvmTxStart) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmTxStart.ProtoReflect.Descriptor instead.
func (*EvmTxStart) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{12}
}

func (x *EvmTxStart) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

type EvmTxEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedGas    uint64 `protobuf:"varint,1,opt,name=used_gas,json=usedGas,proto3" json:"used_gas,omitempty"`
	Err        string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	ReturnData []byte `protobuf:"bytes,3,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
}

func (x *EvmTxEnd) Reset() {
	*x = EvmTxEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvmTxEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmTxEnd) ProtoMessage() {}

func (x *EvmTxEnd) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmTxEnd.ProtoReflect.Descriptor instead.
func (*EvmTxEnd) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{13}
}

func (x *EvmTxEnd) GetUsedGas() uint64 {
	if x != nil {
		return x.UsedGas
	}
	return 0
}

func (x *EvmTxEnd) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *EvmTxEnd) GetReturnData() []byte {
	if x != nil {
		return x.ReturnData
	}
	return nil
}

type EvmCallStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To     []byte `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Create bool   `protobuf:"varint,3,opt,name=create,proto3" json:"create,omitempty"`
	Input  []byte `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Gas    uint64 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	Value  []byte `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EvmCallStart) Reset() {
	*x = EvmCallStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvmCallStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmCallStart) ProtoMessage() {}

func (x *EvmCallStart) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmCallStart.ProtoReflect.Descriptor instead.
func (*EvmCallStart) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{14}
}

func (x *EvmCallStart) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EvmCallStart) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *EvmCallStart) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *EvmCallStart) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EvmCallStart) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *EvmCallStart) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type EvmCallEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  []byte `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	GasUsed uint64 `protobuf:"varint,2,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Err     string `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *EvmCallEnd) Reset() {
	*x = EvmCallEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvmCallEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmCallEnd) ProtoMessage() {}

func (x *EvmCallEnd) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmCallEnd.ProtoReflect.Descriptor instead.
func (*EvmCallEnd) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{15}
}

func (x *EvmCallEnd) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *EvmCallEnd) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EvmCallEnd) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type EvmEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpcodeType uint32 `protobuf:"varint,1,opt,name=opcode_type,json=opcodeType,proto3" json:"opcode_type,omitempty"`
	From       []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To         []byte `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Input      []byte `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Gas        uint64 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	Value      []byte `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EvmEnter) Reset() {
	*x = EvmEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvmEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmEnter) ProtoMessage() {}

func (x *EvmEnter) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmEnter.ProtoReflect.Descriptor instead.
func (*EvmEnter) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{16}
}

func (x *EvmEnter) GetOpcodeType() uint32 {
	if x != nil {
		return x.OpcodeType
	}
	return 0
}

func (x *EvmEnter) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EvmEnter) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *EvmEnter) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EvmEnter) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *EvmEnter) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type EvmExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  []byte `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	GasUsed uint64 `protobuf:"varint,2,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Err     string `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *EvmExit) Reset() {
	*x = EvmExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvmExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmExit) ProtoMessage() {}

func (x *EvmExit) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmExit.ProtoReflect.Descriptor instead.
func (*EvmExit) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{17}
}

func (x *EvmExit) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *EvmExit) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EvmExit) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type StateDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Types that are assignable to Diff:
	//
	//	*StateDiff_Balance
	//	*StateDiff_StorageKey
	//	*StateDiff_Code
	Diff        isStateDiff_Diff `protobuf_oneof:"diff"`
	ValueBefore []byte           `protobuf:"bytes,6,opt,name=value_before,json=valueBefore,proto3" json:"value_before,omitempty"`
	ValueAfter  []byte           `protobuf:"bytes,7,opt,name=value_after,json=valueAfter,proto3" json:"value_after,omitempty"`
}

func (x *StateDiff) Reset() {
	*x = StateDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateDiff) ProtoMessage() {}

func (x *StateDiff) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateDiff.ProtoReflect.Descriptor instead.
func (*StateDiff) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{18}
}

func (x *StateDiff) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (m *StateDiff) GetDiff() isStateDiff_Diff {
	if m != nil {
		return m.Diff
	}
	return nil
}

func (x *StateDiff) GetBalance() bool {
	if x, ok := x.GetDiff().(*StateDiff_Balance); ok {
		return x.Balance
	}
	return false
}

func (x *StateDiff) GetStorageKey() []byte {
	if x, ok := x.GetDiff().(*StateDiff_StorageKey); ok {
		return x.StorageKey
	}
	return nil
}

func (x *StateDiff) GetCode() bool {
	if x, ok := x.GetDiff().(*StateDiff_Code); ok {
		return x.Code
	}
	return false
}

func (x *StateDiff) GetValueBefore() []byte {
	if x != nil {
		return x.ValueBefore
	}
	return nil
}

func (x *StateDiff) GetValueAfter() []byte {
	if x != nil {
		return x.ValueAfter
	}
	return nil
}

type isStateDiff_Diff interface {
	isStateDiff_Diff()
}

type StateDiff_Balance struct {
	Balance bool `protobuf:"varint,3,opt,name=balance,proto3,oneof"`
}

type StateDiff_StorageKey struct {
	StorageKey []byte `protobuf:"bytes,4,opt,name=storage_key,json=storageKey,proto3,oneof"`
}

type StateDiff_Code struct {
	Code bool `protobuf:"varint,5,opt,name=code,proto3,oneof"`
}

func (*StateDiff_Balance) isStateDiff_Diff() {}

func (*StateDiff_StorageKey) isStateDiff_Diff() {}

func (*StateDiff_Code) isStateDiff_Diff() {}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics [][]byte `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	Data   []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{19}
}

func (x *Log) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SimulateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Trace:
	//
	//	*SimulateResponse_Log
	//	*SimulateResponse_TxStart
	//	*SimulateResponse_TxEnd
	//	*SimulateResponse_CallStart
	//	*SimulateResponse_CallEnd
	//	*SimulateResponse_Enter
	//	*SimulateResponse_Exit
	//	*SimulateResponse_OpCodeTrace
	//	*SimulateResponse_StateDiff
	//	*SimulateResponse_Stop
	//	*SimulateResponse_Revert
	//	*SimulateResponse_StatePreservationKey
	Trace isSimulateResponse_Trace `protobuf_oneof:"trace"`
}

func (x *SimulateResponse) Reset() {
	*x = SimulateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateResponse) ProtoMessage() {}

func (x *SimulateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateResponse.ProtoReflect.Descriptor instead.
func (*SimulateResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{20}
}

func (m *SimulateResponse) GetTrace() isSimulateResponse_Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func (x *SimulateResponse) GetLog() *Log {
	if x, ok := x.GetTrace().(*SimulateResponse_Log); ok {
		return x.Log
	}
	return nil
}

func (x *SimulateResponse) GetTxStart() *EvmTxStart {
	if x, ok := x.GetTrace().(*SimulateResponse_TxStart); ok {
		return x.TxStart
	}
	return nil
}

func (x *SimulateResponse) GetTxEnd() *EvmTxEnd {
	if x, ok := x.GetTrace().(*SimulateResponse_TxEnd); ok {
		return x.TxEnd
	}
	return nil
}

func (x *SimulateResponse) GetCallStart() *EvmCallStart {
	if x, ok := x.GetTrace().(*SimulateResponse_CallStart); ok {
		return x.CallStart
	}
	return nil
}

func (x *SimulateResponse) GetCallEnd() *EvmCallEnd {
	if x, ok := x.GetTrace().(*SimulateResponse_CallEnd); ok {
		return x.CallEnd
	}
	return nil
}

func (x *SimulateResponse) GetEnter() *EvmEnter {
	if x, ok := x.GetTrace().(*SimulateResponse_Enter); ok {
		return x.Enter
	}
	return nil
}

func (x *SimulateResponse) GetExit() *EvmExit {
	if x, ok := x.GetTrace().(*SimulateResponse_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *SimulateResponse) GetOpCodeTrace() *OpCodeTrace {
	if x, ok := x.GetTrace().(*SimulateResponse_OpCodeTrace); ok {
		return x.OpCodeTrace
	}
	return nil
}

func (x *SimulateResponse) GetStateDiff() *StateDiff {
	if x, ok := x.GetTrace().(*SimulateResponse_StateDiff); ok {
		return x.StateDiff
	}
	return nil
}

func (x *SimulateResponse) GetStop() string {
	if x, ok := x.GetTrace().(*SimulateResponse_Stop); ok {
		return x.Stop
	}
	return ""
}

func (x *SimulateResponse) GetRevert() []byte {
	if x, ok := x.GetTrace().(*SimulateResponse_Revert); ok {
		return x.Revert
	}
	return nil
}

func (x *SimulateResponse) GetStatePreservationKey() []byte {
	if x, ok := x.GetTrace().(*SimulateResponse_StatePreservationKey); ok {
		return x.StatePreservationKey
	}
	return nil
}

type isSimulateResponse_Trace interface {
	isSimulateResponse_Trace()
}

type SimulateResponse_Log struct {
	Log *Log `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type SimulateResponse_TxStart struct {
	TxStart *EvmTxStart `protobuf:"bytes,2,opt,name=tx_start,json=txStart,proto3,oneof"`
}

type SimulateResponse_TxEnd struct {
	TxEnd *EvmTxEnd `protobuf:"bytes,3,opt,name=tx_end,json=txEnd,proto3,oneof"`
}

type SimulateResponse_CallStart struct {
	CallStart *EvmCallStart `protobuf:"bytes,4,opt,name=call_start,json=callStart,proto3,oneof"`
}

type SimulateResponse_CallEnd struct {
	CallEnd *EvmCallEnd `protobuf:"bytes,5,opt,name=call_end,json=callEnd,proto3,oneof"`
}

type SimulateResponse_Enter struct {
	Enter *EvmEnter `protobuf:"bytes,6,opt,name=enter,proto3,oneof"`
}

type SimulateResponse_Exit struct {
	Exit *EvmExit `protobuf:"bytes,7,opt,name=exit,proto3,oneof"`
}

type SimulateResponse_OpCodeTrace struct {
	OpCodeTrace *OpCodeTrace `protobuf:"bytes,8,opt,name=op_code_trace,json=opCodeTrace,proto3,oneof"`
}

type SimulateResponse_StateDiff struct {
	StateDiff *StateDiff `protobuf:"bytes,9,opt,name=state_diff,json=stateDiff,proto3,oneof"`
}

type SimulateResponse_Stop struct {
	Stop string `protobuf:"bytes,10,opt,name=stop,proto3,oneof"`
}

type SimulateResponse_Revert struct {
	Revert []byte `protobuf:"bytes,11,opt,name=revert,proto3,oneof"`
}

type SimulateResponse_StatePreservationKey struct {
	StatePreservationKey []byte `protobuf:"bytes,12,opt,name=state_preservation_key,json=statePreservationKey,proto3,oneof"` // Add more type of records here.
}

func (*SimulateResponse_Log) isSimulateResponse_Trace() {}

func (*SimulateResponse_TxStart) isSimulateResponse_Trace() {}

func (*SimulateResponse_TxEnd) isSimulateResponse_Trace() {}

func (*SimulateResponse_CallStart) isSimulateResponse_Trace() {}

func (*SimulateResponse_CallEnd) isSimulateResponse_Trace() {}

func (*SimulateResponse_Enter) isSimulateResponse_Trace() {}

func (*SimulateResponse_Exit) isSimulateResponse_Trace() {}

func (*SimulateResponse_OpCodeTrace) isSimulateResponse_Trace() {}

func (*SimulateResponse_StateDiff) isSimulateResponse_Trace() {}

func (*SimulateResponse_Stop) isSimulateResponse_Trace() {}

func (*SimulateResponse_Revert) isSimulateResponse_Trace() {}

func (*SimulateResponse_StatePreservationKey) isSimulateResponse_Trace() {}

type TxToSubmit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encoding      TxEncoding `protobuf:"varint,1,opt,name=encoding,proto3,enum=mev.TxEncoding" json:"encoding,omitempty"`
	Tx            []byte     `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	NeedsSign     bool       `protobuf:"varint,3,opt,name=needs_sign,json=needsSign,proto3" json:"needs_sign,omitempty"`
	SenderAddress []byte     `protobuf:"bytes,4,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	PrivateKey    []byte     `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *TxToSubmit) Reset() {
	*x = TxToSubmit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxToSubmit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxToSubmit) ProtoMessage() {}

func (x *TxToSubmit) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxToSubmit.ProtoReflect.Descriptor instead.
func (*TxToSubmit) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{21}
}

func (x *TxToSubmit) GetEncoding() TxEncoding {
	if x != nil {
		return x.Encoding
	}
	return TxEncoding_TX_ENCODING_RLP
}

func (x *TxToSubmit) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *TxToSubmit) GetNeedsSign() bool {
	if x != nil {
		return x.NeedsSign
	}
	return false
}

func (x *TxToSubmit) GetSenderAddress() []byte {
	if x != nil {
		return x.SenderAddress
	}
	return nil
}

func (x *TxToSubmit) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type SubmitBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of relays to submit this bundle to.
	Relays []string `protobuf:"bytes,1,rep,name=relays,proto3" json:"relays,omitempty"`
	// Not all these fields are respected by all relays.
	// A list of signed transactions to execute in an atomic bundle.
	Txs []*TxToSubmit `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	// Block number for which this bundle is valid on.
	BlockNumber uint64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// (Optional) Number, the minimum timestamp for which this bundle is valid, in seconds since the unix epoch.
	MinTimestamp int64 `protobuf:"varint,4,opt,name=min_timestamp,json=minTimestamp,proto3" json:"min_timestamp,omitempty"`
	// (Optional) Number, the maximum timestamp for which this bundle is valid, in seconds since the unix epoch.
	MaxTimestamp int64 `protobuf:"varint,5,opt,name=max_timestamp,json=maxTimestamp,proto3" json:"max_timestamp,omitempty"`
	// (Optional) A list of tx hashes that are allowed to revert.
	RevertingTxHashes [][]byte `protobuf:"bytes,6,rep,name=reverting_tx_hashes,json=revertingTxHashes,proto3" json:"reverting_tx_hashes,omitempty"`
	// (Optional) For p2p to filter peers to send this bundle to.
	PeerFilter []string `protobuf:"bytes,7,rep,name=peer_filter,json=peerFilter,proto3" json:"peer_filter,omitempty"`
}

func (x *SubmitBundleRequest) Reset() {
	*x = SubmitBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBundleRequest) ProtoMessage() {}

func (x *SubmitBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBundleRequest.ProtoReflect.Descriptor instead.
func (*SubmitBundleRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{22}
}

func (x *SubmitBundleRequest) GetRelays() []string {
	if x != nil {
		return x.Relays
	}
	return nil
}

func (x *SubmitBundleRequest) GetTxs() []*TxToSubmit {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *SubmitBundleRequest) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *SubmitBundleRequest) GetMinTimestamp() int64 {
	if x != nil {
		return x.MinTimestamp
	}
	return 0
}

func (x *SubmitBundleRequest) GetMaxTimestamp() int64 {
	if x != nil {
		return x.MaxTimestamp
	}
	return 0
}

func (x *SubmitBundleRequest) GetRevertingTxHashes() [][]byte {
	if x != nil {
		return x.RevertingTxHashes
	}
	return nil
}

func (x *SubmitBundleRequest) GetPeerFilter() []string {
	if x != nil {
		return x.PeerFilter
	}
	return nil
}

type WatchStateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchId    uint64 `protobuf:"varint,1,opt,name=watch_id,json=watchId,proto3" json:"watch_id,omitempty"`
	Address    []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	StorageKey []byte `protobuf:"bytes,3,opt,name=storage_key,json=storageKey,proto3" json:"storage_key,omitempty"`
}

func (x *WatchStateKey) Reset() {
	*x = WatchStateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchStateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchStateKey) ProtoMessage() {}

func (x *WatchStateKey) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchStateKey.ProtoReflect.Descriptor instead.
func (*WatchStateKey) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{23}
}

func (x *WatchStateKey) GetWatchId() uint64 {
	if x != nil {
		return x.WatchId
	}
	return 0
}

func (x *WatchStateKey) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *WatchStateKey) GetStorageKey() []byte {
	if x != nil {
		return x.StorageKey
	}
	return nil
}

type WatchStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys         []*WatchStateKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	InitialState bool             `protobuf:"varint,2,opt,name=initial_state,json=initialState,proto3" json:"initial_state,omitempty"`
}

func (x *WatchStateRequest) Reset() {
	*x = WatchStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchStateRequest) ProtoMessage() {}

func (x *WatchStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchStateRequest.ProtoReflect.Descriptor instead.
func (*WatchStateRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{24}
}

func (x *WatchStateRequest) GetKeys() []*WatchStateKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *WatchStateRequest) GetInitialState() bool {
	if x != nil {
		return x.InitialState
	}
	return false
}

type WatchStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchId            uint64 `protobuf:"varint,1,opt,name=watch_id,json=watchId,proto3" json:"watch_id,omitempty"`
	StateAfter         []byte `protobuf:"bytes,2,opt,name=state_after,json=stateAfter,proto3" json:"state_after,omitempty"`
	BlockNumber        uint64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash          []byte `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	IsInitialSyncStart bool   `protobuf:"varint,5,opt,name=is_initial_sync_start,json=isInitialSyncStart,proto3" json:"is_initial_sync_start,omitempty"`
	IsBlockCommit      bool   `protobuf:"varint,6,opt,name=is_block_commit,json=isBlockCommit,proto3" json:"is_block_commit,omitempty"`
	ParentHash         []byte `protobuf:"bytes,7,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	ReqId              uint64 `protobuf:"varint,8,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"` // Only populated in initial_state response.
}

func (x *WatchStateResponse) Reset() {
	*x = WatchStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchStateResponse) ProtoMessage() {}

func (x *WatchStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchStateResponse.ProtoReflect.Descriptor instead.
func (*WatchStateResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{25}
}

func (x *WatchStateResponse) GetWatchId() uint64 {
	if x != nil {
		return x.WatchId
	}
	return 0
}

func (x *WatchStateResponse) GetStateAfter() []byte {
	if x != nil {
		return x.StateAfter
	}
	return nil
}

func (x *WatchStateResponse) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *WatchStateResponse) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *WatchStateResponse) GetIsInitialSyncStart() bool {
	if x != nil {
		return x.IsInitialSyncStart
	}
	return false
}

func (x *WatchStateResponse) GetIsBlockCommit() bool {
	if x != nil {
		return x.IsBlockCommit
	}
	return false
}

func (x *WatchStateResponse) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *WatchStateResponse) GetReqId() uint64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

type HistoricalStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block number to query.
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// The addresses to query.
	Address [][]byte `protobuf:"bytes,2,rep,name=address,proto3" json:"address,omitempty"`
	// The storage keys to query.
	StorageKey [][]byte `protobuf:"bytes,3,rep,name=storage_key,json=storageKey,proto3" json:"storage_key,omitempty"`
}

func (x *HistoricalStateRequest) Reset() {
	*x = HistoricalStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalStateRequest) ProtoMessage() {}

func (x *HistoricalStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalStateRequest.ProtoReflect.Descriptor instead.
func (*HistoricalStateRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{26}
}

func (x *HistoricalStateRequest) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *HistoricalStateRequest) GetAddress() [][]byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *HistoricalStateRequest) GetStorageKey() [][]byte {
	if x != nil {
		return x.StorageKey
	}
	return nil
}

type HistoricalStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash []byte   `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Value     [][]byte `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *HistoricalStateResponse) Reset() {
	*x = HistoricalStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalStateResponse) ProtoMessage() {}

func (x *HistoricalStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalStateResponse.ProtoReflect.Descriptor instead.
func (*HistoricalStateResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{27}
}

func (x *HistoricalStateResponse) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *HistoricalStateResponse) GetValue() [][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type UpdateTxpoolWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToAddress           [][]byte `protobuf:"bytes,1,rep,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"` // If to_address matches, the tx is allowed unconditionally.
	MethodIds           [][]byte `protobuf:"bytes,2,rep,name=method_ids,json=methodIds,proto3" json:"method_ids,omitempty"` // If method_id matches, the tx is allowed, unless it matches negative_to_address.
	NegativeToAddresses [][]byte `protobuf:"bytes,3,rep,name=negative_to_addresses,json=negativeToAddresses,proto3" json:"negative_to_addresses,omitempty"`
}

func (x *UpdateTxpoolWhitelistRequest) Reset() {
	*x = UpdateTxpoolWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTxpoolWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTxpoolWhitelistRequest) ProtoMessage() {}

func (x *UpdateTxpoolWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTxpoolWhitelistRequest.ProtoReflect.Descriptor instead.
func (*UpdateTxpoolWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateTxpoolWhitelistRequest) GetToAddress() [][]byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *UpdateTxpoolWhitelistRequest) GetMethodIds() [][]byte {
	if x != nil {
		return x.MethodIds
	}
	return nil
}

func (x *UpdateTxpoolWhitelistRequest) GetNegativeToAddresses() [][]byte {
	if x != nil {
		return x.NegativeToAddresses
	}
	return nil
}

type UpdateTxpoolWhitelistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTxpoolWhitelistResponse) Reset() {
	*x = UpdateTxpoolWhitelistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTxpoolWhitelistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTxpoolWhitelistResponse) ProtoMessage() {}

func (x *UpdateTxpoolWhitelistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTxpoolWhitelistResponse.ProtoReflect.Descriptor instead.
func (*UpdateTxpoolWhitelistResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{29}
}

type DumpTxpoolWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DumpTxpoolWhitelistRequest) Reset() {
	*x = DumpTxpoolWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpTxpoolWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpTxpoolWhitelistRequest) ProtoMessage() {}

func (x *DumpTxpoolWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpTxpoolWhitelistRequest.ProtoReflect.Descriptor instead.
func (*DumpTxpoolWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{30}
}

type DumpTxpoolWhitelistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToAddress           [][]byte `protobuf:"bytes,1,rep,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	MethodIds           [][]byte `protobuf:"bytes,2,rep,name=method_ids,json=methodIds,proto3" json:"method_ids,omitempty"`
	NegativeToAddresses [][]byte `protobuf:"bytes,3,rep,name=negative_to_addresses,json=negativeToAddresses,proto3" json:"negative_to_addresses,omitempty"`
}

func (x *DumpTxpoolWhitelistResponse) Reset() {
	*x = DumpTxpoolWhitelistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpTxpoolWhitelistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpTxpoolWhitelistResponse) ProtoMessage() {}

func (x *DumpTxpoolWhitelistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpTxpoolWhitelistResponse.ProtoReflect.Descriptor instead.
func (*DumpTxpoolWhitelistResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{31}
}

func (x *DumpTxpoolWhitelistResponse) GetToAddress() [][]byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *DumpTxpoolWhitelistResponse) GetMethodIds() [][]byte {
	if x != nil {
		return x.MethodIds
	}
	return nil
}

func (x *DumpTxpoolWhitelistResponse) GetNegativeToAddresses() [][]byte {
	if x != nil {
		return x.NegativeToAddresses
	}
	return nil
}

type TxRelayHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LocalTimeSeenUs   uint64    `protobuf:"varint,2,opt,name=local_time_seen_us,json=localTimeSeenUs,proto3" json:"local_time_seen_us,omitempty"`
	LocalCostUs       uint64    `protobuf:"varint,3,opt,name=local_cost_us,json=localCostUs,proto3" json:"local_cost_us,omitempty"`
	TrustedClock      bool      `protobuf:"varint,4,opt,name=trusted_clock,json=trustedClock,proto3" json:"trusted_clock,omitempty"`
	RemotePeer        *PeerInfo `protobuf:"bytes,5,opt,name=remote_peer,json=remotePeer,proto3" json:"remote_peer,omitempty"`                         // Only populate if the tx is received from p2p network.
	IsDirectBroadcast bool      `protobuf:"varint,6,opt,name=is_direct_broadcast,json=isDirectBroadcast,proto3" json:"is_direct_broadcast,omitempty"` // Only populate if the tx is received from p2p network.
}

func (x *TxRelayHop) Reset() {
	*x = TxRelayHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRelayHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRelayHop) ProtoMessage() {}

func (x *TxRelayHop) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRelayHop.ProtoReflect.Descriptor instead.
func (*TxRelayHop) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{32}
}

func (x *TxRelayHop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TxRelayHop) GetLocalTimeSeenUs() uint64 {
	if x != nil {
		return x.LocalTimeSeenUs
	}
	return 0
}

func (x *TxRelayHop) GetLocalCostUs() uint64 {
	if x != nil {
		return x.LocalCostUs
	}
	return 0
}

func (x *TxRelayHop) GetTrustedClock() bool {
	if x != nil {
		return x.TrustedClock
	}
	return false
}

func (x *TxRelayHop) GetRemotePeer() *PeerInfo {
	if x != nil {
		return x.RemotePeer
	}
	return nil
}

func (x *TxRelayHop) GetIsDirectBroadcast() bool {
	if x != nil {
		return x.IsDirectBroadcast
	}
	return false
}

type TxRelayHops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hops []*TxRelayHop `protobuf:"bytes,1,rep,name=hops,proto3" json:"hops,omitempty"`
}

func (x *TxRelayHops) Reset() {
	*x = TxRelayHops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRelayHops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRelayHops) ProtoMessage() {}

func (x *TxRelayHops) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRelayHops.ProtoReflect.Descriptor instead.
func (*TxRelayHops) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{33}
}

func (x *TxRelayHops) GetHops() []*TxRelayHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

type RelayTxFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash      [][]byte       `protobuf:"bytes,1,rep,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionRlp       [][]byte       `protobuf:"bytes,2,rep,name=transaction_rlp,json=transactionRlp,proto3" json:"transaction_rlp,omitempty"`
	FirstPeer            []*PeerInfo    `protobuf:"bytes,3,rep,name=first_peer,json=firstPeer,proto3" json:"first_peer,omitempty"`
	FirstSeenTimestampUs []uint64       `protobuf:"varint,4,rep,packed,name=first_seen_timestamp_us,json=firstSeenTimestampUs,proto3" json:"first_seen_timestamp_us,omitempty"`
	IsDirectBroadcast    []bool         `protobuf:"varint,5,rep,packed,name=is_direct_broadcast,json=isDirectBroadcast,proto3" json:"is_direct_broadcast,omitempty"`
	RelayName            string         `protobuf:"bytes,6,opt,name=relay_name,json=relayName,proto3" json:"relay_name,omitempty"`                                              // Only the first request will have this field set.
	RelayCostUs          uint64         `protobuf:"varint,7,opt,name=relay_cost_us,json=relayCostUs,proto3" json:"relay_cost_us,omitempty"`                                     // Time spent locally in order to relay that batch of tx.  Only populated by normal relay.
	EstimatedTotalCostUs []uint64       `protobuf:"varint,8,rep,packed,name=estimated_total_cost_us,json=estimatedTotalCostUs,proto3" json:"estimated_total_cost_us,omitempty"` // Only populated when super relay -> full node.
	Hops                 []*TxRelayHops `protobuf:"bytes,9,rep,name=hops,proto3" json:"hops,omitempty"`                                                                         // Only populated when super relay -> super relay.
	TrueOrigin           []string       `protobuf:"bytes,10,rep,name=true_origin,json=trueOrigin,proto3" json:"true_origin,omitempty"`                                          // Only populated when super relay -> super relay.
	ChainIds             []string       `protobuf:"bytes,11,rep,name=chain_ids,json=chainIds,proto3" json:"chain_ids,omitempty"`                                                // Only populated when super relay -> super relay.
}

func (x *RelayTxFeedRequest) Reset() {
	*x = RelayTxFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayTxFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayTxFeedRequest) ProtoMessage() {}

func (x *RelayTxFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayTxFeedRequest.ProtoReflect.Descriptor instead.
func (*RelayTxFeedRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{34}
}

func (x *RelayTxFeedRequest) GetTransactionHash() [][]byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

func (x *RelayTxFeedRequest) GetTransactionRlp() [][]byte {
	if x != nil {
		return x.TransactionRlp
	}
	return nil
}

func (x *RelayTxFeedRequest) GetFirstPeer() []*PeerInfo {
	if x != nil {
		return x.FirstPeer
	}
	return nil
}

func (x *RelayTxFeedRequest) GetFirstSeenTimestampUs() []uint64 {
	if x != nil {
		return x.FirstSeenTimestampUs
	}
	return nil
}

func (x *RelayTxFeedRequest) GetIsDirectBroadcast() []bool {
	if x != nil {
		return x.IsDirectBroadcast
	}
	return nil
}

func (x *RelayTxFeedRequest) GetRelayName() string {
	if x != nil {
		return x.RelayName
	}
	return ""
}

func (x *RelayTxFeedRequest) GetRelayCostUs() uint64 {
	if x != nil {
		return x.RelayCostUs
	}
	return 0
}

func (x *RelayTxFeedRequest) GetEstimatedTotalCostUs() []uint64 {
	if x != nil {
		return x.EstimatedTotalCostUs
	}
	return nil
}

func (x *RelayTxFeedRequest) GetHops() []*TxRelayHops {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *RelayTxFeedRequest) GetTrueOrigin() []string {
	if x != nil {
		return x.TrueOrigin
	}
	return nil
}

func (x *RelayTxFeedRequest) GetChainIds() []string {
	if x != nil {
		return x.ChainIds
	}
	return nil
}

type RelayTxFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RelayTxFeedResponse) Reset() {
	*x = RelayTxFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayTxFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayTxFeedResponse) ProtoMessage() {}

func (x *RelayTxFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayTxFeedResponse.ProtoReflect.Descriptor instead.
func (*RelayTxFeedResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{35}
}

type WatchBatchBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayNodeUrl string `protobuf:"bytes,1,opt,name=relay_node_url,json=relayNodeUrl,proto3" json:"relay_node_url,omitempty"` // Relay url so that it can be added to trusted nodes automatically.
}

func (x *WatchBatchBundleRequest) Reset() {
	*x = WatchBatchBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchBatchBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBatchBundleRequest) ProtoMessage() {}

func (x *WatchBatchBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBatchBundleRequest.ProtoReflect.Descriptor instead.
func (*WatchBatchBundleRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{36}
}

func (x *WatchBatchBundleRequest) GetRelayNodeUrl() string {
	if x != nil {
		return x.RelayNodeUrl
	}
	return ""
}

type WatchBatchBundleV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawPackets      [][]byte `protobuf:"bytes,1,rep,name=raw_packets,json=rawPackets,proto3" json:"raw_packets,omitempty"`
	PeerFilters     []string `protobuf:"bytes,2,rep,name=peer_filters,json=peerFilters,proto3" json:"peer_filters,omitempty"`
	PacketsPerBatch int32    `protobuf:"varint,3,opt,name=packets_per_batch,json=packetsPerBatch,proto3" json:"packets_per_batch,omitempty"`
	ShuffleBatches  bool     `protobuf:"varint,4,opt,name=shuffle_batches,json=shuffleBatches,proto3" json:"shuffle_batches,omitempty"`
}

func (x *WatchBatchBundleV2Response) Reset() {
	*x = WatchBatchBundleV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchBatchBundleV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBatchBundleV2Response) ProtoMessage() {}

func (x *WatchBatchBundleV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBatchBundleV2Response.ProtoReflect.Descriptor instead.
func (*WatchBatchBundleV2Response) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{37}
}

func (x *WatchBatchBundleV2Response) GetRawPackets() [][]byte {
	if x != nil {
		return x.RawPackets
	}
	return nil
}

func (x *WatchBatchBundleV2Response) GetPeerFilters() []string {
	if x != nil {
		return x.PeerFilters
	}
	return nil
}

func (x *WatchBatchBundleV2Response) GetPacketsPerBatch() int32 {
	if x != nil {
		return x.PacketsPerBatch
	}
	return 0
}

func (x *WatchBatchBundleV2Response) GetShuffleBatches() bool {
	if x != nil {
		return x.ShuffleBatches
	}
	return false
}

type BatchBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundles           []*SubmitBundleRequest `protobuf:"bytes,1,rep,name=bundles,proto3" json:"bundles,omitempty"`
	BundlesPerBatch   int32                  `protobuf:"varint,2,opt,name=bundles_per_batch,json=bundlesPerBatch,proto3" json:"bundles_per_batch,omitempty"`
	ShuffleBatches    bool                   `protobuf:"varint,3,opt,name=shuffle_batches,json=shuffleBatches,proto3" json:"shuffle_batches,omitempty"`
	PostponeBroadcast bool                   `protobuf:"varint,4,opt,name=postpone_broadcast,json=postponeBroadcast,proto3" json:"postpone_broadcast,omitempty"` // If true, broadcast will be postponed until the requester explicitly calls BroadcastBatchBundle.
}

func (x *BatchBundleRequest) Reset() {
	*x = BatchBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchBundleRequest) ProtoMessage() {}

func (x *BatchBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchBundleRequest.ProtoReflect.Descriptor instead.
func (*BatchBundleRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{38}
}

func (x *BatchBundleRequest) GetBundles() []*SubmitBundleRequest {
	if x != nil {
		return x.Bundles
	}
	return nil
}

func (x *BatchBundleRequest) GetBundlesPerBatch() int32 {
	if x != nil {
		return x.BundlesPerBatch
	}
	return 0
}

func (x *BatchBundleRequest) GetShuffleBatches() bool {
	if x != nil {
		return x.ShuffleBatches
	}
	return false
}

func (x *BatchBundleRequest) GetPostponeBroadcast() bool {
	if x != nil {
		return x.PostponeBroadcast
	}
	return false
}

type BundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	StateChanged TxState  `protobuf:"varint,2,opt,name=state_changed,json=stateChanged,proto3,enum=mev.TxState" json:"state_changed,omitempty"`
	BundleUuid   string   `protobuf:"bytes,3,opt,name=bundle_uuid,json=bundleUuid,proto3" json:"bundle_uuid,omitempty"`
	SignedTxs    [][]byte `protobuf:"bytes,4,rep,name=signed_txs,json=signedTxs,proto3" json:"signed_txs,omitempty"`
}

func (x *BundleResponse) Reset() {
	*x = BundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleResponse) ProtoMessage() {}

func (x *BundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleResponse.ProtoReflect.Descriptor instead.
func (*BundleResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{39}
}

func (x *BundleResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *BundleResponse) GetStateChanged() TxState {
	if x != nil {
		return x.StateChanged
	}
	return TxState_TX_STATE_PENDING
}

func (x *BundleResponse) GetBundleUuid() string {
	if x != nil {
		return x.BundleUuid
	}
	return ""
}

func (x *BundleResponse) GetSignedTxs() [][]byte {
	if x != nil {
		return x.SignedTxs
	}
	return nil
}

type BatchBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses   []*BundleResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	BundleToken []byte            `protobuf:"bytes,2,opt,name=bundle_token,json=bundleToken,proto3" json:"bundle_token,omitempty"` // Only populated if postpone_broadcast is true.  Can be used to broadcast the bundle.
}

func (x *BatchBundleResponse) Reset() {
	*x = BatchBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchBundleResponse) ProtoMessage() {}

func (x *BatchBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchBundleResponse.ProtoReflect.Descriptor instead.
func (*BatchBundleResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{40}
}

func (x *BatchBundleResponse) GetResponses() []*BundleResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *BatchBundleResponse) GetBundleToken() []byte {
	if x != nil {
		return x.BundleToken
	}
	return nil
}

type BroadcastBatchBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleTokens    [][]byte `protobuf:"bytes,1,rep,name=bundle_tokens,json=bundleTokens,proto3" json:"bundle_tokens,omitempty"`
	PacketsPerBatch int32    `protobuf:"varint,2,opt,name=packets_per_batch,json=packetsPerBatch,proto3" json:"packets_per_batch,omitempty"`
	ShuffleBatches  bool     `protobuf:"varint,3,opt,name=shuffle_batches,json=shuffleBatches,proto3" json:"shuffle_batches,omitempty"`
}

func (x *BroadcastBatchBundleRequest) Reset() {
	*x = BroadcastBatchBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastBatchBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastBatchBundleRequest) ProtoMessage() {}

func (x *BroadcastBatchBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastBatchBundleRequest.ProtoReflect.Descriptor instead.
func (*BroadcastBatchBundleRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{41}
}

func (x *BroadcastBatchBundleRequest) GetBundleTokens() [][]byte {
	if x != nil {
		return x.BundleTokens
	}
	return nil
}

func (x *BroadcastBatchBundleRequest) GetPacketsPerBatch() int32 {
	if x != nil {
		return x.PacketsPerBatch
	}
	return 0
}

func (x *BroadcastBatchBundleRequest) GetShuffleBatches() bool {
	if x != nil {
		return x.ShuffleBatches
	}
	return false
}

type BroadcastBatchBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BroadcastBatchBundleResponse) Reset() {
	*x = BroadcastBatchBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastBatchBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastBatchBundleResponse) ProtoMessage() {}

func (x *BroadcastBatchBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastBatchBundleResponse.ProtoReflect.Descriptor instead.
func (*BroadcastBatchBundleResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{42}
}

type GetRawHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumbers []uint64 `protobuf:"varint,1,rep,packed,name=block_numbers,json=blockNumbers,proto3" json:"block_numbers,omitempty"`
	BlockHashes  [][]byte `protobuf:"bytes,2,rep,name=block_hashes,json=blockHashes,proto3" json:"block_hashes,omitempty"`
}

func (x *GetRawHeadersRequest) Reset() {
	*x = GetRawHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawHeadersRequest) ProtoMessage() {}

func (x *GetRawHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawHeadersRequest.ProtoReflect.Descriptor instead.
func (*GetRawHeadersRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{43}
}

func (x *GetRawHeadersRequest) GetBlockNumbers() []uint64 {
	if x != nil {
		return x.BlockNumbers
	}
	return nil
}

func (x *GetRawHeadersRequest) GetBlockHashes() [][]byte {
	if x != nil {
		return x.BlockHashes
	}
	return nil
}

type GetRawHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers [][]byte `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *GetRawHeadersResponse) Reset() {
	*x = GetRawHeadersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawHeadersResponse) ProtoMessage() {}

func (x *GetRawHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawHeadersResponse.ProtoReflect.Descriptor instead.
func (*GetRawHeadersResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{44}
}

func (x *GetRawHeadersResponse) GetHeaders() [][]byte {
	if x != nil {
		return x.Headers
	}
	return nil
}

type WatchStateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*WatchStateStreamRequest_InitialRequest
	//	*WatchStateStreamRequest_AddWatch
	//	*WatchStateStreamRequest_RemoveWatch
	Request isWatchStateStreamRequest_Request `protobuf_oneof:"request"`
	ReqId   uint64                            `protobuf:"varint,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *WatchStateStreamRequest) Reset() {
	*x = WatchStateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchStateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchStateStreamRequest) ProtoMessage() {}

func (x *WatchStateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchStateStreamRequest.ProtoReflect.Descriptor instead.
func (*WatchStateStreamRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{45}
}

func (m *WatchStateStreamRequest) GetRequest() isWatchStateStreamRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *WatchStateStreamRequest) GetInitialRequest() *WatchStateRequest {
	if x, ok := x.GetRequest().(*WatchStateStreamRequest_InitialRequest); ok {
		return x.InitialRequest
	}
	return nil
}

func (x *WatchStateStreamRequest) GetAddWatch() *WatchStateRequest {
	if x, ok := x.GetRequest().(*WatchStateStreamRequest_AddWatch); ok {
		return x.AddWatch
	}
	return nil
}

func (x *WatchStateStreamRequest) GetRemoveWatch() *WatchStateKey {
	if x, ok := x.GetRequest().(*WatchStateStreamRequest_RemoveWatch); ok {
		return x.RemoveWatch
	}
	return nil
}

func (x *WatchStateStreamRequest) GetReqId() uint64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

type isWatchStateStreamRequest_Request interface {
	isWatchStateStreamRequest_Request()
}

type WatchStateStreamRequest_InitialRequest struct {
	InitialRequest *WatchStateRequest `protobuf:"bytes,1,opt,name=initial_request,json=initialRequest,proto3,oneof"`
}

type WatchStateStreamRequest_AddWatch struct {
	AddWatch *WatchStateRequest `protobuf:"bytes,2,opt,name=add_watch,json=addWatch,proto3,oneof"`
}

type WatchStateStreamRequest_RemoveWatch struct {
	RemoveWatch *WatchStateKey `protobuf:"bytes,3,opt,name=remove_watch,json=removeWatch,proto3,oneof"`
}

func (*WatchStateStreamRequest_InitialRequest) isWatchStateStreamRequest_Request() {}

func (*WatchStateStreamRequest_AddWatch) isWatchStateStreamRequest_Request() {}

func (*WatchStateStreamRequest_RemoveWatch) isWatchStateStreamRequest_Request() {}

type EthCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// Types that are assignable to Callee:
	//
	//	*EthCallRequest_Address
	//	*EthCallRequest_Code
	Callee  isEthCallRequest_Callee `protobuf_oneof:"callee"`
	Data    []byte                  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	AbiType string                  `protobuf:"bytes,5,opt,name=abi_type,json=abiType,proto3" json:"abi_type,omitempty"`
}

func (x *EthCallRequest) Reset() {
	*x = EthCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCallRequest) ProtoMessage() {}

func (x *EthCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCallRequest.ProtoReflect.Descriptor instead.
func (*EthCallRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{46}
}

func (x *EthCallRequest) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (m *EthCallRequest) GetCallee() isEthCallRequest_Callee {
	if m != nil {
		return m.Callee
	}
	return nil
}

func (x *EthCallRequest) GetAddress() []byte {
	if x, ok := x.GetCallee().(*EthCallRequest_Address); ok {
		return x.Address
	}
	return nil
}

func (x *EthCallRequest) GetCode() []byte {
	if x, ok := x.GetCallee().(*EthCallRequest_Code); ok {
		return x.Code
	}
	return nil
}

func (x *EthCallRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EthCallRequest) GetAbiType() string {
	if x != nil {
		return x.AbiType
	}
	return ""
}

type isEthCallRequest_Callee interface {
	isEthCallRequest_Callee()
}

type EthCallRequest_Address struct {
	Address []byte `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

type EthCallRequest_Code struct {
	Code []byte `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

func (*EthCallRequest_Address) isEthCallRequest_Callee() {}

func (*EthCallRequest_Code) isEthCallRequest_Callee() {}

type EthCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  []byte `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	GasUsed uint64 `protobuf:"varint,2,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Err     string `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *EthCallResponse) Reset() {
	*x = EthCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCallResponse) ProtoMessage() {}

func (x *EthCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCallResponse.ProtoReflect.Descriptor instead.
func (*EthCallResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{47}
}

func (x *EthCallResponse) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *EthCallResponse) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthCallResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type ServeHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginBlockHash   []byte `protobuf:"bytes,1,opt,name=origin_block_hash,json=originBlockHash,proto3" json:"origin_block_hash,omitempty"`
	OriginBlockNumber uint64 `protobuf:"varint,2,opt,name=origin_block_number,json=originBlockNumber,proto3" json:"origin_block_number,omitempty"`
	Amount            uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip              uint64 `protobuf:"varint,4,opt,name=skip,proto3" json:"skip,omitempty"`
	Reverse           bool   `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *ServeHeadersRequest) Reset() {
	*x = ServeHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServeHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeHeadersRequest) ProtoMessage() {}

func (x *ServeHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeHeadersRequest.ProtoReflect.Descriptor instead.
func (*ServeHeadersRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{48}
}

func (x *ServeHeadersRequest) GetOriginBlockHash() []byte {
	if x != nil {
		return x.OriginBlockHash
	}
	return nil
}

func (x *ServeHeadersRequest) GetOriginBlockNumber() uint64 {
	if x != nil {
		return x.OriginBlockNumber
	}
	return 0
}

func (x *ServeHeadersRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ServeHeadersRequest) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ServeHeadersRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type ServeHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers [][]byte `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *ServeHeadersResponse) Reset() {
	*x = ServeHeadersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServeHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeHeadersResponse) ProtoMessage() {}

func (x *ServeHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeHeadersResponse.ProtoReflect.Descriptor instead.
func (*ServeHeadersResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{49}
}

func (x *ServeHeadersResponse) GetHeaders() [][]byte {
	if x != nil {
		return x.Headers
	}
	return nil
}

type RegisterLocalAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses   [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	PrivateKeys [][]byte `protobuf:"bytes,2,rep,name=private_keys,json=privateKeys,proto3" json:"private_keys,omitempty"`
}

func (x *RegisterLocalAccountsRequest) Reset() {
	*x = RegisterLocalAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterLocalAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterLocalAccountsRequest) ProtoMessage() {}

func (x *RegisterLocalAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterLocalAccountsRequest.ProtoReflect.Descriptor instead.
func (*RegisterLocalAccountsRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{50}
}

func (x *RegisterLocalAccountsRequest) GetAddresses() [][]byte {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *RegisterLocalAccountsRequest) GetPrivateKeys() [][]byte {
	if x != nil {
		return x.PrivateKeys
	}
	return nil
}

type RegisterLocalAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterLocalAccountsResponse) Reset() {
	*x = RegisterLocalAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterLocalAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterLocalAccountsResponse) ProtoMessage() {}

func (x *RegisterLocalAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterLocalAccountsResponse.ProtoReflect.Descriptor instead.
func (*RegisterLocalAccountsResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{51}
}

type PrepareSimulateEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateOverrides []*StateOverride `protobuf:"bytes,1,rep,name=state_overrides,json=stateOverrides,proto3" json:"state_overrides,omitempty"`
}

func (x *PrepareSimulateEnvRequest) Reset() {
	*x = PrepareSimulateEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSimulateEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSimulateEnvRequest) ProtoMessage() {}

func (x *PrepareSimulateEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSimulateEnvRequest.ProtoReflect.Descriptor instead.
func (*PrepareSimulateEnvRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{52}
}

func (x *PrepareSimulateEnvRequest) GetStateOverrides() []*StateOverride {
	if x != nil {
		return x.StateOverrides
	}
	return nil
}

type PrepareSimulateEnvResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreparedSimulateEnv string `protobuf:"bytes,1,opt,name=prepared_simulate_env,json=preparedSimulateEnv,proto3" json:"prepared_simulate_env,omitempty"`
}

func (x *PrepareSimulateEnvResponse) Reset() {
	*x = PrepareSimulateEnvResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSimulateEnvResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSimulateEnvResponse) ProtoMessage() {}

func (x *PrepareSimulateEnvResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSimulateEnvResponse.ProtoReflect.Descriptor instead.
func (*PrepareSimulateEnvResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{53}
}

func (x *PrepareSimulateEnvResponse) GetPreparedSimulateEnv() string {
	if x != nil {
		return x.PreparedSimulateEnv
	}
	return ""
}

type ServeBodiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHashes [][]byte `protobuf:"bytes,1,rep,name=block_hashes,json=blockHashes,proto3" json:"block_hashes,omitempty"`
}

func (x *ServeBodiesRequest) Reset() {
	*x = ServeBodiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServeBodiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeBodiesRequest) ProtoMessage() {}

func (x *ServeBodiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeBodiesRequest.ProtoReflect.Descriptor instead.
func (*ServeBodiesRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{54}
}

func (x *ServeBodiesRequest) GetBlockHashes() [][]byte {
	if x != nil {
		return x.BlockHashes
	}
	return nil
}

type ServeBodiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RlpBodies [][]byte `protobuf:"bytes,1,rep,name=rlp_bodies,json=rlpBodies,proto3" json:"rlp_bodies,omitempty"`
}

func (x *ServeBodiesResponse) Reset() {
	*x = ServeBodiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServeBodiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeBodiesResponse) ProtoMessage() {}

func (x *ServeBodiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeBodiesResponse.ProtoReflect.Descriptor instead.
func (*ServeBodiesResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{55}
}

func (x *ServeBodiesResponse) GetRlpBodies() [][]byte {
	if x != nil {
		return x.RlpBodies
	}
	return nil
}

type ServeSnapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgCode uint64 `protobuf:"varint,1,opt,name=msg_code,json=msgCode,proto3" json:"msg_code,omitempty"`
	MsgData []byte `protobuf:"bytes,2,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`
}

func (x *ServeSnapRequest) Reset() {
	*x = ServeSnapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServeSnapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeSnapRequest) ProtoMessage() {}

func (x *ServeSnapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeSnapRequest.ProtoReflect.Descriptor instead.
func (*ServeSnapRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{56}
}

func (x *ServeSnapRequest) GetMsgCode() uint64 {
	if x != nil {
		return x.MsgCode
	}
	return 0
}

func (x *ServeSnapRequest) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

type ServeSnapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgCode uint64 `protobuf:"varint,1,opt,name=msg_code,json=msgCode,proto3" json:"msg_code,omitempty"`
	MsgData []byte `protobuf:"bytes,2,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`
}

func (x *ServeSnapResponse) Reset() {
	*x = ServeSnapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServeSnapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeSnapResponse) ProtoMessage() {}

func (x *ServeSnapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeSnapResponse.ProtoReflect.Descriptor instead.
func (*ServeSnapResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{57}
}

func (x *ServeSnapResponse) GetMsgCode() uint64 {
	if x != nil {
		return x.MsgCode
	}
	return 0
}

func (x *ServeSnapResponse) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

type SuperRelayPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GrpcAddress string `protobuf:"bytes,2,opt,name=grpc_address,json=grpcAddress,proto3" json:"grpc_address,omitempty"`
}

func (x *SuperRelayPeer) Reset() {
	*x = SuperRelayPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperRelayPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperRelayPeer) ProtoMessage() {}

func (x *SuperRelayPeer) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperRelayPeer.ProtoReflect.Descriptor instead.
func (*SuperRelayPeer) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{58}
}

func (x *SuperRelayPeer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SuperRelayPeer) GetGrpcAddress() string {
	if x != nil {
		return x.GrpcAddress
	}
	return ""
}

type UpdatePeerMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*SuperRelayPeer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *UpdatePeerMapRequest) Reset() {
	*x = UpdatePeerMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePeerMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePeerMapRequest) ProtoMessage() {}

func (x *UpdatePeerMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePeerMapRequest.ProtoReflect.Descriptor instead.
func (*UpdatePeerMapRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{59}
}

func (x *UpdatePeerMapRequest) GetPeers() []*SuperRelayPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type UpdatePeerMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePeerMapResponse) Reset() {
	*x = UpdatePeerMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePeerMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePeerMapResponse) ProtoMessage() {}

func (x *UpdatePeerMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePeerMapResponse.ProtoReflect.Descriptor instead.
func (*UpdatePeerMapResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{60}
}

type RelayFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasTrustedClock bool `protobuf:"varint,1,opt,name=has_trusted_clock,json=hasTrustedClock,proto3" json:"has_trusted_clock,omitempty"`
	IsSuperRelay    bool `protobuf:"varint,2,opt,name=is_super_relay,json=isSuperRelay,proto3" json:"is_super_relay,omitempty"`
}

func (x *RelayFeatures) Reset() {
	*x = RelayFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayFeatures) ProtoMessage() {}

func (x *RelayFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayFeatures.ProtoReflect.Descriptor instead.
func (*RelayFeatures) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{61}
}

func (x *RelayFeatures) GetHasTrustedClock() bool {
	if x != nil {
		return x.HasTrustedClock
	}
	return false
}

func (x *RelayFeatures) GetIsSuperRelay() bool {
	if x != nil {
		return x.IsSuperRelay
	}
	return false
}

type RelayRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Features *RelayFeatures `protobuf:"bytes,2,opt,name=features,proto3" json:"features,omitempty"`
	ChainId  string         `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *RelayRegisterRequest) Reset() {
	*x = RelayRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayRegisterRequest) ProtoMessage() {}

func (x *RelayRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayRegisterRequest.ProtoReflect.Descriptor instead.
func (*RelayRegisterRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{62}
}

func (x *RelayRegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelayRegisterRequest) GetFeatures() *RelayFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *RelayRegisterRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type RelayStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*RelayStreamRequest_Register
	//	*RelayStreamRequest_TxFeed
	Request isRelayStreamRequest_Request `protobuf_oneof:"request"`
}

func (x *RelayStreamRequest) Reset() {
	*x = RelayStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayStreamRequest) ProtoMessage() {}

func (x *RelayStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayStreamRequest.ProtoReflect.Descriptor instead.
func (*RelayStreamRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{63}
}

func (m *RelayStreamRequest) GetRequest() isRelayStreamRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RelayStreamRequest) GetRegister() *RelayRegisterRequest {
	if x, ok := x.GetRequest().(*RelayStreamRequest_Register); ok {
		return x.Register
	}
	return nil
}

func (x *RelayStreamRequest) GetTxFeed() *RelayTxFeedRequest {
	if x, ok := x.GetRequest().(*RelayStreamRequest_TxFeed); ok {
		return x.TxFeed
	}
	return nil
}

type isRelayStreamRequest_Request interface {
	isRelayStreamRequest_Request()
}

type RelayStreamRequest_Register struct {
	Register *RelayRegisterRequest `protobuf:"bytes,1,opt,name=register,proto3,oneof"` // First request must be a register request.
}

type RelayStreamRequest_TxFeed struct {
	TxFeed *RelayTxFeedRequest `protobuf:"bytes,2,opt,name=tx_feed,json=txFeed,proto3,oneof"`
}

func (*RelayStreamRequest_Register) isRelayStreamRequest_Request() {}

func (*RelayStreamRequest_TxFeed) isRelayStreamRequest_Request() {}

type RelayStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*RelayStreamResponse_RelayName
	Response isRelayStreamResponse_Response `protobuf_oneof:"response"`
}

func (x *RelayStreamResponse) Reset() {
	*x = RelayStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayStreamResponse) ProtoMessage() {}

func (x *RelayStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayStreamResponse.ProtoReflect.Descriptor instead.
func (*RelayStreamResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{64}
}

func (m *RelayStreamResponse) GetResponse() isRelayStreamResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RelayStreamResponse) GetRelayName() string {
	if x, ok := x.GetResponse().(*RelayStreamResponse_RelayName); ok {
		return x.RelayName
	}
	return ""
}

type isRelayStreamResponse_Response interface {
	isRelayStreamResponse_Response()
}

type RelayStreamResponse_RelayName struct {
	RelayName string `protobuf:"bytes,1,opt,name=relay_name,json=relayName,proto3,oneof"`
}

func (*RelayStreamResponse_RelayName) isRelayStreamResponse_Response() {}

type SuperRelayTxJournalRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTimeUs uint64        `protobuf:"varint,1,opt,name=local_time_us,json=localTimeUs,proto3" json:"local_time_us,omitempty"`
	Hops        []*TxRelayHop `protobuf:"bytes,2,rep,name=hops,proto3" json:"hops,omitempty"`
}

func (x *SuperRelayTxJournalRecord) Reset() {
	*x = SuperRelayTxJournalRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperRelayTxJournalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperRelayTxJournalRecord) ProtoMessage() {}

func (x *SuperRelayTxJournalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperRelayTxJournalRecord.ProtoReflect.Descriptor instead.
func (*SuperRelayTxJournalRecord) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{65}
}

func (x *SuperRelayTxJournalRecord) GetLocalTimeUs() uint64 {
	if x != nil {
		return x.LocalTimeUs
	}
	return 0
}

func (x *SuperRelayTxJournalRecord) GetHops() []*TxRelayHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

type QueryTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *QueryTxRequest) Reset() {
	*x = QueryTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTxRequest) ProtoMessage() {}

func (x *QueryTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTxRequest.ProtoReflect.Descriptor instead.
func (*QueryTxRequest) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{66}
}

func (x *QueryTxRequest) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type QueryTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*SuperRelayTxJournalRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *QueryTxResponse) Reset() {
	*x = QueryTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTxResponse) ProtoMessage() {}

func (x *QueryTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTxResponse.ProtoReflect.Descriptor instead.
func (*QueryTxResponse) Descriptor() ([]byte, []int) {
	return file_infra_proto_rawDescGZIP(), []int{67}
}

func (x *QueryTxResponse) GetRecords() []*SuperRelayTxJournalRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

var File_infra_proto protoreflect.FileDescriptor

var file_infra_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d,
	0x65, 0x76, 0x22, 0xe8, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x54, 0x78, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a,
	0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x22, 0x9c, 0x03, 0x0a, 0x11,
	0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61,
	0x73, 0x65, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x76, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x16, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x76,
	0x2e, 0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x18, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x16,
	0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x67, 0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x76, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x54,
	0x78, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x65, 0x76, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x77, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3f, 0x0a, 0x0a, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x22, 0x42, 0x0a, 0x0b, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01,
	0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x22, 0xb9, 0x04, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x76, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x12, 0x33, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x0b, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x75, 0x73, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x62, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x62, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x22, 0x29, 0x0a, 0x0a, 0x45, 0x76, 0x6d, 0x54, 0x78, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x58,
	0x0a, 0x08, 0x45, 0x76, 0x6d, 0x54, 0x78, 0x45, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x64, 0x47, 0x61, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x6d,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x0a, 0x45, 0x76, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x08, 0x45, 0x76, 0x6d, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x07, 0x45, 0x76, 0x6d, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xc6, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22,
	0x31, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8d, 0x04, 0x0a, 0x10, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x4c, 0x6f, 0x67, 0x48, 0x00,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x45, 0x76,
	0x6d, 0x54, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x07, 0x74, 0x78, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x45, 0x76, 0x6d, 0x54, 0x78, 0x45,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x05, 0x74, 0x78, 0x45, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x45, 0x76, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x45, 0x76, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x25, 0x0a,
	0x05, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x65, 0x76, 0x2e, 0x45, 0x76, 0x6d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x45, 0x76, 0x6d, 0x45, 0x78, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0a, 0x54, 0x78, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x54, 0x78, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x8e, 0x02, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x54, 0x78, 0x54, 0x6f, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x11, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x60, 0x0a,
	0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xa5, 0x02, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x16, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x22,
	0x4e, 0x0a, 0x17, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x90, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x78, 0x70, 0x6f,
	0x6f, 0x6c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x78, 0x70, 0x6f, 0x6f,
	0x6c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x0a, 0x54, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x48,
	0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x65,
	0x6e, 0x55, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x0b,
	0x54, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x68,
	0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x76, 0x2e,
	0x54, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x70, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73,
	0x22, 0xdb, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x6c, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6c, 0x70, 0x12, 0x2c, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x73,
	0x74, 0x55, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x6f,
	0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x54,
	0x78, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x15,
	0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xb5, 0x01, 0x0a, 0x1a, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0xcc,
	0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x74,
	0x70, 0x6f, 0x6e, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x99, 0x01,
	0x0a, 0x0e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x6d, 0x65, 0x76, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x73, 0x22, 0x6b, 0x0a, 0x13, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x1b, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x22, 0x1e, 0x0a, 0x1c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x22, 0x31, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x45, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x62, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x62, 0x69, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x65, 0x22, 0x56, 0x0a, 0x0f, 0x45, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xb7, 0x01,
	0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x5f, 0x0a, 0x1c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x19, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x1a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x22, 0x37, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x22, 0x34, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6c, 0x70, 0x5f, 0x62,
	0x6f, 0x64, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x6c, 0x70,
	0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73,
	0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x49, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x0e, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x76, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x61, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61,
	0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x22, 0x75, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65,
	0x76, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x78, 0x46, 0x65, 0x65, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a,
	0x19, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x23,
	0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x65, 0x76, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x70, 0x52, 0x04, 0x68,
	0x6f, 0x70, 0x73, 0x22, 0x29, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4b,
	0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x54, 0x78, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2a, 0x37, 0x0a, 0x0a, 0x54,
	0x78, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x58, 0x5f,
	0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4c, 0x50, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x58, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4a, 0x53,
	0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x82, 0x01, 0x0a, 0x07, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x58, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x58, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x59,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0x54, 0x0a, 0x0e, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x58, 0x44, 0x41, 0x54, 0x41, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x58, 0x48,
	0x41, 0x53, 0x48, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x2a,
	0x63, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0x02, 0x32, 0x85, 0x0b, 0x0a, 0x08, 0x4d, 0x45, 0x56, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x12, 0x52, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x78,
	0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x08, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x76, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x76, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x78, 0x70, 0x6f,
	0x6f, 0x6c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x44, 0x75, 0x6d, 0x70,
	0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x78, 0x70, 0x6f, 0x6f, 0x6c,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x78, 0x70, 0x6f, 0x6f,
	0x6c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x46,
	0x65, 0x65, 0x64, 0x12, 0x17, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54,
	0x78, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d,
	0x65, 0x76, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x42, 0x0a, 0x0b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x6d, 0x65, 0x76, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x56, 0x32, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x07, 0x45, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x13, 0x2e, 0x6d, 0x65,
	0x76, 0x2e, 0x45, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x45, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x12, 0x17,
	0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x12, 0x15, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x76,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6d, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x76, 0x2e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x76, 0x2e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x8c, 0x01, 0x0a,
	0x0a, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x46, 0x0a, 0x0b, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x6d, 0x65, 0x76,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x12, 0x13,
	0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1a, 0x5a, 0x18, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x78, 0x79, 0x7a, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x2f,
	0x6d, 0x65, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_proto_rawDescOnce sync.Once
	file_infra_proto_rawDescData = file_infra_proto_rawDesc
)

func file_infra_proto_rawDescGZIP() []byte {
	file_infra_proto_rawDescOnce.Do(func() {
		file_infra_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_proto_rawDescData)
	})
	return file_infra_proto_rawDescData
}

var file_infra_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_infra_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_infra_proto_goTypes = []interface{}{
	(TxEncoding)(0),                       // 0: mev.TxEncoding
	(TxState)(0),                          // 1: mev.TxState
	(SimulateTxType)(0),                   // 2: mev.SimulateTxType
	(StateDiffType)(0),                    // 3: mev.StateDiffType
	(*SubscribeTxpoolRequest)(nil),        // 4: mev.SubscribeTxpoolRequest
	(*PeerInfo)(nil),                      // 5: mev.PeerInfo
	(*TxpoolTransaction)(nil),             // 6: mev.TxpoolTransaction
	(*PoolSpecificAttributes)(nil),        // 7: mev.PoolSpecificAttributes
	(*SubscribeTxpoolResponse)(nil),       // 8: mev.SubscribeTxpoolResponse
	(*SimulateRawMessage)(nil),            // 9: mev.SimulateRawMessage
	(*SimulateTxData)(nil),                // 10: mev.SimulateTxData
	(*OpCodeHook)(nil),                    // 11: mev.OpCodeHook
	(*OpCodeTrace)(nil),                   // 12: mev.OpCodeTrace
	(*StateOverride)(nil),                 // 13: mev.StateOverride
	(*BlockOverrides)(nil),                // 14: mev.BlockOverrides
	(*SimulateRequest)(nil),               // 15: mev.SimulateRequest
	(*EvmTxStart)(nil),                    // 16: mev.EvmTxStart
	(*EvmTxEnd)(nil),                      // 17: mev.EvmTxEnd
	(*EvmCallStart)(nil),                  // 18: mev.EvmCallStart
	(*EvmCallEnd)(nil),                    // 19: mev.EvmCallEnd
	(*EvmEnter)(nil),                      // 20: mev.EvmEnter
	(*EvmExit)(nil),                       // 21: mev.EvmExit
	(*StateDiff)(nil),                     // 22: mev.StateDiff
	(*Log)(nil),                           // 23: mev.Log
	(*SimulateResponse)(nil),              // 24: mev.SimulateResponse
	(*TxToSubmit)(nil),                    // 25: mev.TxToSubmit
	(*SubmitBundleRequest)(nil),           // 26: mev.SubmitBundleRequest
	(*WatchStateKey)(nil),                 // 27: mev.WatchStateKey
	(*WatchStateRequest)(nil),             // 28: mev.WatchStateRequest
	(*WatchStateResponse)(nil),            // 29: mev.WatchStateResponse
	(*HistoricalStateRequest)(nil),        // 30: mev.HistoricalStateRequest
	(*HistoricalStateResponse)(nil),       // 31: mev.HistoricalStateResponse
	(*UpdateTxpoolWhitelistRequest)(nil),  // 32: mev.UpdateTxpoolWhitelistRequest
	(*UpdateTxpoolWhitelistResponse)(nil), // 33: mev.UpdateTxpoolWhitelistResponse
	(*DumpTxpoolWhitelistRequest)(nil),    // 34: mev.DumpTxpoolWhitelistRequest
	(*DumpTxpoolWhitelistResponse)(nil),   // 35: mev.DumpTxpoolWhitelistResponse
	(*TxRelayHop)(nil),                    // 36: mev.TxRelayHop
	(*TxRelayHops)(nil),                   // 37: mev.TxRelayHops
	(*RelayTxFeedRequest)(nil),            // 38: mev.RelayTxFeedRequest
	(*RelayTxFeedResponse)(nil),           // 39: mev.RelayTxFeedResponse
	(*WatchBatchBundleRequest)(nil),       // 40: mev.WatchBatchBundleRequest
	(*WatchBatchBundleV2Response)(nil),    // 41: mev.WatchBatchBundleV2Response
	(*BatchBundleRequest)(nil),            // 42: mev.BatchBundleRequest
	(*BundleResponse)(nil),                // 43: mev.BundleResponse
	(*BatchBundleResponse)(nil),           // 44: mev.BatchBundleResponse
	(*BroadcastBatchBundleRequest)(nil),   // 45: mev.BroadcastBatchBundleRequest
	(*BroadcastBatchBundleResponse)(nil),  // 46: mev.BroadcastBatchBundleResponse
	(*GetRawHeadersRequest)(nil),          // 47: mev.GetRawHeadersRequest
	(*GetRawHeadersResponse)(nil),         // 48: mev.GetRawHeadersResponse
	(*WatchStateStreamRequest)(nil),       // 49: mev.WatchStateStreamRequest
	(*EthCallRequest)(nil),                // 50: mev.EthCallRequest
	(*EthCallResponse)(nil),               // 51: mev.EthCallResponse
	(*ServeHeadersRequest)(nil),           // 52: mev.ServeHeadersRequest
	(*ServeHeadersResponse)(nil),          // 53: mev.ServeHeadersResponse
	(*RegisterLocalAccountsRequest)(nil),  // 54: mev.RegisterLocalAccountsRequest
	(*RegisterLocalAccountsResponse)(nil), // 55: mev.RegisterLocalAccountsResponse
	(*PrepareSimulateEnvRequest)(nil),     // 56: mev.PrepareSimulateEnvRequest
	(*PrepareSimulateEnvResponse)(nil),    // 57: mev.PrepareSimulateEnvResponse
	(*ServeBodiesRequest)(nil),            // 58: mev.ServeBodiesRequest
	(*ServeBodiesResponse)(nil),           // 59: mev.ServeBodiesResponse
	(*ServeSnapRequest)(nil),              // 60: mev.ServeSnapRequest
	(*ServeSnapResponse)(nil),             // 61: mev.ServeSnapResponse
	(*SuperRelayPeer)(nil),                // 62: mev.SuperRelayPeer
	(*UpdatePeerMapRequest)(nil),          // 63: mev.UpdatePeerMapRequest
	(*UpdatePeerMapResponse)(nil),         // 64: mev.UpdatePeerMapResponse
	(*RelayFeatures)(nil),                 // 65: mev.RelayFeatures
	(*RelayRegisterRequest)(nil),          // 66: mev.RelayRegisterRequest
	(*RelayStreamRequest)(nil),            // 67: mev.RelayStreamRequest
	(*RelayStreamResponse)(nil),           // 68: mev.RelayStreamResponse
	(*SuperRelayTxJournalRecord)(nil),     // 69: mev.SuperRelayTxJournalRecord
	(*QueryTxRequest)(nil),                // 70: mev.QueryTxRequest
	(*QueryTxResponse)(nil),               // 71: mev.QueryTxResponse
	nil,                                   // 72: mev.StateOverride.StorageEntry
}
var file_infra_proto_depIdxs = []int32{
	0,  // 0: mev.SubscribeTxpoolRequest.encoding:type_name -> mev.TxEncoding
	1,  // 1: mev.TxpoolTransaction.state:type_name -> mev.TxState
	5,  // 2: mev.TxpoolTransaction.first_peer:type_name -> mev.PeerInfo
	6,  // 3: mev.SubscribeTxpoolResponse.transaction:type_name -> mev.TxpoolTransaction
	7,  // 4: mev.SubscribeTxpoolResponse.pool_specific_attributes:type_name -> mev.PoolSpecificAttributes
	2,  // 5: mev.SimulateTxData.type:type_name -> mev.SimulateTxType
	0,  // 6: mev.SimulateTxData.encoding:type_name -> mev.TxEncoding
	9,  // 7: mev.SimulateTxData.raw_message:type_name -> mev.SimulateRawMessage
	72, // 8: mev.StateOverride.storage:type_name -> mev.StateOverride.StorageEntry
	10, // 9: mev.SimulateRequest.bundle:type_name -> mev.SimulateTxData
	14, // 10: mev.SimulateRequest.block_overrides:type_name -> mev.BlockOverrides
	13, // 11: mev.SimulateRequest.state_overrides:type_name -> mev.StateOverride
	11, // 12: mev.SimulateRequest.op_code_hooks:type_name -> mev.OpCodeHook
	23, // 13: mev.SimulateResponse.log:type_name -> mev.Log
	16, // 14: mev.SimulateResponse.tx_start:type_name -> mev.EvmTxStart
	17, // 15: mev.SimulateResponse.tx_end:type_name -> mev.EvmTxEnd
	18, // 16: mev.SimulateResponse.call_start:type_name -> mev.EvmCallStart
	19, // 17: mev.SimulateResponse.call_end:type_name -> mev.EvmCallEnd
	20, // 18: mev.SimulateResponse.enter:type_name -> mev.EvmEnter
	21, // 19: mev.SimulateResponse.exit:type_name -> mev.EvmExit
	12, // 20: mev.SimulateResponse.op_code_trace:type_name -> mev.OpCodeTrace
	22, // 21: mev.SimulateResponse.state_diff:type_name -> mev.StateDiff
	0,  // 22: mev.TxToSubmit.encoding:type_name -> mev.TxEncoding
	25, // 23: mev.SubmitBundleRequest.txs:type_name -> mev.TxToSubmit
	27, // 24: mev.WatchStateRequest.keys:type_name -> mev.WatchStateKey
	5,  // 25: mev.TxRelayHop.remote_peer:type_name -> mev.PeerInfo
	36, // 26: mev.TxRelayHops.hops:type_name -> mev.TxRelayHop
	5,  // 27: mev.RelayTxFeedRequest.first_peer:type_name -> mev.PeerInfo
	37, // 28: mev.RelayTxFeedRequest.hops:type_name -> mev.TxRelayHops
	26, // 29: mev.BatchBundleRequest.bundles:type_name -> mev.SubmitBundleRequest
	1,  // 30: mev.BundleResponse.state_changed:type_name -> mev.TxState
	43, // 31: mev.BatchBundleResponse.responses:type_name -> mev.BundleResponse
	28, // 32: mev.WatchStateStreamRequest.initial_request:type_name -> mev.WatchStateRequest
	28, // 33: mev.WatchStateStreamRequest.add_watch:type_name -> mev.WatchStateRequest
	27, // 34: mev.WatchStateStreamRequest.remove_watch:type_name -> mev.WatchStateKey
	13, // 35: mev.PrepareSimulateEnvRequest.state_overrides:type_name -> mev.StateOverride
	62, // 36: mev.UpdatePeerMapRequest.peers:type_name -> mev.SuperRelayPeer
	65, // 37: mev.RelayRegisterRequest.features:type_name -> mev.RelayFeatures
	66, // 38: mev.RelayStreamRequest.register:type_name -> mev.RelayRegisterRequest
	38, // 39: mev.RelayStreamRequest.tx_feed:type_name -> mev.RelayTxFeedRequest
	36, // 40: mev.SuperRelayTxJournalRecord.hops:type_name -> mev.TxRelayHop
	69, // 41: mev.QueryTxResponse.records:type_name -> mev.SuperRelayTxJournalRecord
	4,  // 42: mev.MEVInfra.SubscribeTxpool:input_type -> mev.SubscribeTxpoolRequest
	15, // 43: mev.MEVInfra.Simulate:input_type -> mev.SimulateRequest
	28, // 44: mev.MEVInfra.WatchState:input_type -> mev.WatchStateRequest
	49, // 45: mev.MEVInfra.WatchStateStream:input_type -> mev.WatchStateStreamRequest
	30, // 46: mev.MEVInfra.HistoricalState:input_type -> mev.HistoricalStateRequest
	32, // 47: mev.MEVInfra.UpdateTxpoolWhitelist:input_type -> mev.UpdateTxpoolWhitelistRequest
	34, // 48: mev.MEVInfra.DumpTxpoolWhitelist:input_type -> mev.DumpTxpoolWhitelistRequest
	38, // 49: mev.MEVInfra.RelayTxFeed:input_type -> mev.RelayTxFeedRequest
	42, // 50: mev.MEVInfra.BatchBundle:input_type -> mev.BatchBundleRequest
	45, // 51: mev.MEVInfra.BroadcastBatchBundle:input_type -> mev.BroadcastBatchBundleRequest
	40, // 52: mev.MEVInfra.WatchBatchBundleV2:input_type -> mev.WatchBatchBundleRequest
	47, // 53: mev.MEVInfra.GetRawHeaders:input_type -> mev.GetRawHeadersRequest
	50, // 54: mev.MEVInfra.EthCall:input_type -> mev.EthCallRequest
	52, // 55: mev.MEVInfra.ServeHeaders:input_type -> mev.ServeHeadersRequest
	58, // 56: mev.MEVInfra.ServeBodies:input_type -> mev.ServeBodiesRequest
	60, // 57: mev.MEVInfra.ServeSnap:input_type -> mev.ServeSnapRequest
	54, // 58: mev.MEVInfra.RegisterLocalAccounts:input_type -> mev.RegisterLocalAccountsRequest
	56, // 59: mev.MEVInfra.PrepareSimulateEnv:input_type -> mev.PrepareSimulateEnvRequest
	67, // 60: mev.SuperRelay.RelayStream:input_type -> mev.RelayStreamRequest
	70, // 61: mev.SuperRelay.QueryTx:input_type -> mev.QueryTxRequest
	8,  // 62: mev.MEVInfra.SubscribeTxpool:output_type -> mev.SubscribeTxpoolResponse
	24, // 63: mev.MEVInfra.Simulate:output_type -> mev.SimulateResponse
	29, // 64: mev.MEVInfra.WatchState:output_type -> mev.WatchStateResponse
	29, // 65: mev.MEVInfra.WatchStateStream:output_type -> mev.WatchStateResponse
	31, // 66: mev.MEVInfra.HistoricalState:output_type -> mev.HistoricalStateResponse
	33, // 67: mev.MEVInfra.UpdateTxpoolWhitelist:output_type -> mev.UpdateTxpoolWhitelistResponse
	35, // 68: mev.MEVInfra.DumpTxpoolWhitelist:output_type -> mev.DumpTxpoolWhitelistResponse
	39, // 69: mev.MEVInfra.RelayTxFeed:output_type -> mev.RelayTxFeedResponse
	44, // 70: mev.MEVInfra.BatchBundle:output_type -> mev.BatchBundleResponse
	46, // 71: mev.MEVInfra.BroadcastBatchBundle:output_type -> mev.BroadcastBatchBundleResponse
	41, // 72: mev.MEVInfra.WatchBatchBundleV2:output_type -> mev.WatchBatchBundleV2Response
	48, // 73: mev.MEVInfra.GetRawHeaders:output_type -> mev.GetRawHeadersResponse
	51, // 74: mev.MEVInfra.EthCall:output_type -> mev.EthCallResponse
	53, // 75: mev.MEVInfra.ServeHeaders:output_type -> mev.ServeHeadersResponse
	59, // 76: mev.MEVInfra.ServeBodies:output_type -> mev.ServeBodiesResponse
	61, // 77: mev.MEVInfra.ServeSnap:output_type -> mev.ServeSnapResponse
	55, // 78: mev.MEVInfra.RegisterLocalAccounts:output_type -> mev.RegisterLocalAccountsResponse
	57, // 79: mev.MEVInfra.PrepareSimulateEnv:output_type -> mev.PrepareSimulateEnvResponse
	68, // 80: mev.SuperRelay.RelayStream:output_type -> mev.RelayStreamResponse
	71, // 81: mev.SuperRelay.QueryTx:output_type -> mev.QueryTxResponse
	62, // [62:82] is the sub-list for method output_type
	42, // [42:62] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_infra_proto_init() }
func file_infra_proto_init() {
	if File_infra_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTxpoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxpoolTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolSpecificAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTxpoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateRawMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateTxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpCodeHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpCodeTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvmTxStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvmTxEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvmCallStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvmCallEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvmEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvmExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxToSubmit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchStateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTxpoolWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTxpoolWhitelistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpTxpoolWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpTxpoolWhitelistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRelayHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRelayHops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayTxFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayTxFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchBatchBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchBatchBundleV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastBatchBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastBatchBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawHeadersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchStateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServeHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServeHeadersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterLocalAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterLocalAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSimulateEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSimulateEnvResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServeBodiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServeBodiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServeSnapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServeSnapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperRelayPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePeerMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePeerMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperRelayTxJournalRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*StateDiff_Balance)(nil),
		(*StateDiff_StorageKey)(nil),
		(*StateDiff_Code)(nil),
	}
	file_infra_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*SimulateResponse_Log)(nil),
		(*SimulateResponse_TxStart)(nil),
		(*SimulateResponse_TxEnd)(nil),
		(*SimulateResponse_CallStart)(nil),
		(*SimulateResponse_CallEnd)(nil),
		(*SimulateResponse_Enter)(nil),
		(*SimulateResponse_Exit)(nil),
		(*SimulateResponse_OpCodeTrace)(nil),
		(*SimulateResponse_StateDiff)(nil),
		(*SimulateResponse_Stop)(nil),
		(*SimulateResponse_Revert)(nil),
		(*SimulateResponse_StatePreservationKey)(nil),
	}
	file_infra_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*WatchStateStreamRequest_InitialRequest)(nil),
		(*WatchStateStreamRequest_AddWatch)(nil),
		(*WatchStateStreamRequest_RemoveWatch)(nil),
	}
	file_infra_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*EthCallRequest_Address)(nil),
		(*EthCallRequest_Code)(nil),
	}
	file_infra_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*RelayStreamRequest_Register)(nil),
		(*RelayStreamRequest_TxFeed)(nil),
	}
	file_infra_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*RelayStreamResponse_RelayName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_infra_proto_goTypes,
		DependencyIndexes: file_infra_proto_depIdxs,
		EnumInfos:         file_infra_proto_enumTypes,
		MessageInfos:      file_infra_proto_msgTypes,
	}.Build()
	File_infra_proto = out.File
	file_infra_proto_rawDesc = nil
	file_infra_proto_goTypes = nil
	file_infra_proto_depIdxs = nil
}
